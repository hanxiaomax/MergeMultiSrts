1
00:00:00,000 ---> 00:00:03,480
我再次强调一下功能安全的终极目标

2
00:00:03,480 ---> 00:00:06,804
那就是 通过把风险降低到可接受水平来避免安全事故

3
00:00:06,804 ---> 00:00:09,449
首先 我们要知道哪些子系统确实具有高风险等级

4
00:00:09,449 ---> 00:00:13,134
以及我们需要做什么 来预防事故发生

5
00:00:13,134 ---> 00:00:15,224
我们来看一下架构设计中的各个项目

6
00:00:15,224 ---> 00:00:19,530
大家需要总结出 要达到安全目标 哪些子系统和元素将会被涉及到

7
00:00:19,530 ---> 00:00:22,050
还需要进一步细化这些高层级目标

8
00:00:22,050 ---> 00:00:24,894
把它们转化为我们所说的“功能安全要求”

9
00:00:24,894 ---> 00:00:26,085
然后 我们再把这些功能安全要求

10
00:00:26,085 ---> 00:00:30,420
放到我们架构中的合适位置上

11
00:00:30,420 ---> 00:00:32,670
我们把这些信息抽取出来 总结到一个文档中

12
00:00:32,670 ---> 00:00:35,280
称为功能安全概念文档

13
00:00:32,670 ---> 00:00:35,280
称为功能安全概念文档

14
00:00:35,780 ---> 00:00:38,735
现在回到我们的车道偏离报警例子中

15
00:00:38,735 ---> 00:00:43,810
我们从第一个安全目标来推导出一些功能安全要求

16
00:00:43,809 ---> 00:00:48,374
我们遇到的故障是 方向盘的报警震动过于强烈

17
00:00:48,375 ---> 00:00:51,619
从这个故障 我们可以得出一个安全目标

18
00:00:51,619 ---> 00:00:54,979
那就是 车道偏离报警功能中的震荡扭矩需要被限制

19
00:00:54,979 ---> 00:00:57,969
对一个车道偏离报警系统来说

20
00:00:57,970 ---> 00:00:59,260
定义一个扭矩振幅最大值和一个最大频率

21
00:00:59,260 ---> 00:01:04,220
是非常有用的

22
00:01:04,220 ---> 00:01:05,730
从上述安全目标

23
00:01:05,729 ---> 00:01:10,369
我们可以为车道偏离报警系统定义两个功能安全要求

24
00:01:10,370 ---> 00:01:12,530
第一个功能安全要求是

25
00:01:12,530 ---> 00:01:15,950
车道保持模块必须确保

26
00:01:15,950 ---> 00:01:19,700
车道偏离震荡扭矩幅度小于最大扭矩幅度

27
00:01:19,700 ---> 00:01:22,624
第二个功能安全要求是

28
00:01:22,624 ---> 00:01:24,829
车道保持模块必须确保

29
00:01:24,829 ---> 00:01:30,199
车道偏离震荡扭矩频率小于最大扭矩频率

30
00:01:30,200 ---> 00:01:32,615
注意我们这里的措辞 “必须”

31
00:01:32,615 ---> 00:01:34,999
因为这些都是强制要求

32
00:01:34,999 ---> 00:01:37,034
现在 回顾一下上面我们所做的工作

33
00:01:37,035 ---> 00:01:41,150
我们从一个要求限制震动的安全目标开始

34
00:01:41,150 ---> 00:01:43,520
通过分析我们的架构

35
00:01:43,519 ---> 00:01:46,639
得出两个新的安全要求来达到安全目标

36
00:01:46,639 ---> 00:01:49,549
最后我们得出

37
00:01:49,549 ---> 00:01:52,789
车道辅助模块需要限制震荡幅度和振荡频率

38
00:01:49,549 ---> 00:01:52,789
车道辅助模块需要限制震荡幅度和振荡频率

39
00:01:53,289 ---> 00:01:58,064
现在 我们的车道偏离报警系统有了两个功能安全要求

40
00:01:58,064 ---> 00:02:01,839
第一个要求限制方向盘的振动频率

41
00:02:01,839 ---> 00:02:05,824
第二个要求限制方向盘的振动幅度

42
00:02:05,824 ---> 00:02:09,159
现在 我们要决定车道保持系统的哪个部分

43
00:02:09,158 ---> 00:02:12,914
将会负责执行这两种限制

44
00:02:12,914 ---> 00:02:15,758
车道辅助模块包括三个子系统

45
00:02:15,758 ---> 00:02:18,068
摄像头系统 显示系统

46
00:02:18,069 ---> 00:02:20,109
以及电子助力转向系统

47
00:02:20,109 ---> 00:02:23,284
我们来看一下架构图

48
00:02:23,284 ---> 00:02:26,859
从逻辑上 我们可以说摄像头子系统和电子转向子系统

49
00:02:26,859 ---> 00:02:31,349
都可以来限制频率和幅度

50
00:02:31,349 ---> 00:02:35,349
例如 我们可以设定

51
00:02:35,349 ---> 00:02:39,789
摄像头子系统请求的震动扭矩必须低于某个阈值

52
00:02:39,789 ---> 00:02:43,359
或者我们也可以设定

53
00:02:43,359 ---> 00:02:47,184
助力转向子系统输出的震动扭矩必须低于该阈值

54
00:02:47,184 ---> 00:02:50,629
但是 只要有可能 我们还是想要尽力降低复杂度

55
00:02:50,629 ---> 00:02:52,959
简单点的解决方案是

56
00:02:52,959 ---> 00:02:57,573
我们只要求助力转向子系统来限制震动 对于摄像头子系统不做要求

57
00:02:57,573 ---> 00:02:59,888
这样的话

58
00:02:59,888 ---> 00:03:03,308
从功能安全角度来看 相关的子系统就只有一个助力转向系统

59
00:03:03,308 ---> 00:03:05,233
这样 车道偏离报警功能

60
00:03:05,233 ---> 00:03:09,473
可以很简单地加入我们的架构设计中

61
00:03:09,474 ---> 00:03:14,588
与其相关的用来限制震动报警的元素只有电子助力转向 ECU

62
00:03:14,588 ---> 00:03:19,868
我们把两个相关功能安全要求放在助力转向 ECU 中

63
00:03:19,868 ---> 00:03:23,948
我们还要稍微调整一下措辞

64
00:03:23,948 ---> 00:03:29,468
以前我们说车道保持模块用来限制震动扭矩

65
00:03:29,469 ---> 00:03:32,559
现在 我们可以更加明确地说

66
00:03:32,558 ---> 00:03:35,108
助力转向 ECU 将会限制震动扭矩

67
00:03:35,108 ---> 00:03:39,883
这里是最终的安全要求

68
00:03:39,883 ---> 00:03:43,269
功能安全要求1：电子助力转向 ECU 必须确保

69
00:03:43,269 ---> 00:03:48,789
车道偏离报警的震荡扭矩幅度小于最大扭矩幅度

70
00:03:48,789 ---> 00:03:51,233
功能安全要求2：

71
00:03:51,233 ---> 00:03:54,518
电子助力转向 ECU 必须确保

72
00:03:54,519 ---> 00:04:00,133
车道偏离报警的震荡扭矩频率小于最大扭矩频率

73
00:04:00,133 ---> 00:04:02,508
我们可以把结果放在一个表格中

74
00:04:02,508 ---> 00:04:05,273
注意 这里我们用的是一个简化了的例子

75
00:04:05,274 ---> 00:04:06,459
实践中更常见的是

76
00:04:06,458 ---> 00:04:11,289
一个功能安全需求会涉及到若干个子系统

77
00:04:06,458 ---> 00:04:11,289
一个功能安全需求会涉及到若干个子系统

78
00:04:15,188 ---> 00:04:19,888
下面我们将把所有的额外功能写入我们的架构图表中

79
00:04:19,888 ---> 00:04:22,641
这是我们最初的系统架构图

80
00:04:22,641 ---> 00:04:25,499
下面我们来给三个子系统添加更多细节

81
00:04:25,499 ---> 00:04:29,003
汽车显示子系统会需要额外的软件块

82
00:04:29,003 ---> 00:04:33,618
一个软件块控制指示灯 告诉司机车道保持模块处于打开或者关闭状态

83
00:04:33,618 ---> 00:04:35,458
第二个软件块控制另一个指示灯

84
00:04:35,459 ---> 00:04:38,669
告诉司机 车道偏离报警是否处于激活状态

85
00:04:38,668 ---> 00:04:42,098
摄像头子系统需要两个软件块

86
00:04:42,098 ---> 00:04:45,088
一个用来感应车道

87
00:04:45,088 ---> 00:04:48,728
另一个用来发送扭矩请求给电子助力转向子系统

88
00:04:48,728 ---> 00:04:52,563
电子助力转向子系统需要三个软件块

89
00:04:52,563 ---> 00:04:55,959
第一个用于侦测司机转动方向盘的角度大小

90
00:04:55,959 ---> 00:04:57,688
第二个软件块从摄像头子系统

91
00:04:57,688 ---> 00:05:01,168
接收震动扭矩请求

92
00:05:01,169 ---> 00:05:04,049
在这个软件块中

93
00:05:04,048 ---> 00:05:07,569
我们会完成限制震荡幅度和频率的工作

94
00:05:07,569 ---> 00:05:10,349
第三个软件块将把这些扭矩请求加在一起

95
00:05:10,349 ---> 00:05:13,578
输出一个最终的扭矩给马达 然后马达再驱动转向轮

96
00:05:13,578 ---> 00:05:16,258
现在 我们已经推导出功能安全要求

97
00:05:16,258 ---> 00:05:19,489
并把这些要求加入到我们的系统架构图中

98
00:05:19,489 ---> 00:05:23,249
在下面步骤中 我们会在架构图上标示出风险级别

99
00:05:19,489 ---> 00:05:23,249
在下面步骤中 我们会在架构图上标示出风险级别

100
00:05:23,749 ---> 00:05:27,949
我们需要给细化的架构图添加 ASIL 标签

101
00:05:27,949 ---> 00:05:34,758
如果不这样做 我们就不知道哪个子系统或模块需要使用 ISO 26262 来进行分析

102
00:05:34,758 ---> 00:05:36,583
这里 一个通用的规则是

103
00:05:36,584 ---> 00:05:41,014
功能安全要求直接从安全目标继承 ASIL 级别

104
00:05:41,014 ---> 00:05:43,966
从危害分析和风险管理出发

105
00:05:43,966 ---> 00:05:47,808
我们得出 车道偏离报警的安全目标是 扭矩需要限制

106
00:05:47,808 ---> 00:05:50,988
我们决定把上述安全目标标为 ASIL C

107
00:05:50,988 ---> 00:05:54,558
这样 车道偏离报警相关的两个功能安全要求

108
00:05:54,558 ---> 00:05:57,678
会继承该值 即 ASIL C

109
00:05:57,678 ---> 00:06:01,803
因为我们把这两个功能安全要求放在电子助力转向中

110
00:06:01,803 ---> 00:06:05,749
整个电子助力转向子系统也会继承 ASIL C 等级

111
00:06:05,749 ---> 00:06:09,839
然而 车辆显示子系统中的摄像头对应的 ASIL 级别是什么？

112
00:06:09,839 ---> 00:06:13,009
我们之前说过 从功能安全角度出发

113
00:06:13,008 ---> 00:06:16,698
唯一相关的子系统就是电子助力转向系统

114
00:06:16,699 ---> 00:06:20,744
而这两个子系统 我们没有为它们定义任何功能安全要求

115
00:06:20,743 ---> 00:06:24,918
所以 我们把车辆显示子系统中的摄像头标记为 QM

116
00:06:24,919 ---> 00:06:29,134
随便说一下 QM 意思是质量管理

117
00:06:29,134 ---> 00:06:33,078
架构图中标示为 QM 的模块无需进行功能安全分析

118
00:06:33,078 ---> 00:06:38,479
因为它们对应的风险已经处于一个可接受的级别

119
00:06:38,479 ---> 00:06:42,044
现在我们快速总结一下我们目前完成的工作

120
00:06:42,044 ---> 00:06:45,408
我们从安全目标推出了功能安全要求

121
00:06:45,408 ---> 00:06:49,818
我们细化了架构设计 把功能安全要求加了进去

122
00:06:49,818 ---> 00:06:54,723
此外 我们还为三个子系统定义了风险级别

123
00:06:54,723 ---> 00:06:59,749
接下来 我们会看看 对于我们的任意系统元素 是否还有别的方法来降低 ASIL

124
00:06:54,723 ---> 00:06:59,749
接下来 我们会看看 对于我们的任意系统元素 是否还有别的方法来降低 ASIL

125
00:07:00,249 ---> 00:07:03,534
我们讲过 对于车道偏离报警功能

126
00:07:03,534 ---> 00:07:07,344
电子助力转向子系统的风险级别为 ASIL C

127
00:07:07,343 ---> 00:07:10,579
尽管 ASIL C 并非最高的风险级别

128
00:07:10,579 ---> 00:07:12,399
但是 相比更低的级别

129
00:07:12,399 ---> 00:07:17,369
此级别仍然需要很多额外测试和校验工作

130
00:07:17,369 ---> 00:07:21,924
有什么方法可以降低架构中某些元素的风险级别吗？

131
00:07:21,924 ---> 00:07:23,483
事实证明还是有办法的

132
00:07:23,483 ---> 00:07:25,933
该方法称为 ASIL 分解

133
00:07:25,933 ---> 00:07:29,108
假设我们系统中的某个功能模块被标示为 ASIL D

134
00:07:29,108 ---> 00:07:32,709
如果我们为此模块实现两个完全互相独立的冗余系统

135
00:07:32,709 ---> 00:07:38,938
根据 ISO 26262 我们可以把每个冗余系统标示为 ASIL B

136
00:07:38,938 ---> 00:07:41,249
结果源于概率

137
00:07:41,249 ---> 00:07:45,729
如果单个系统的故障发生概率为0.8

138
00:07:45,728 ---> 00:07:48,608
那么两个互相独立的冗余系统均发生故障的概率

139
00:07:48,608 ---> 00:07:52,883
会降低到0.8乘0.8 也就是0.64

140
00:07:52,883 ---> 00:07:55,553
冗余系统可以降低风险

141
00:07:55,553 ---> 00:07:59,428
创建独立冗余系统的收益何在？

142
00:07:59,428 ---> 00:08:04,494
答案是 相比 ASIL D ASIL B需要的分析和测试工作量更少

143
00:08:04,494 ---> 00:08:08,465
根据参考标准 如果原始系统风险级别为 ASIL D

144
00:08:08,465 ---> 00:08:12,639
那么冗余系统的风险级别可以标为 ASIL B(D)

145
00:08:12,639 ---> 00:08:15,729
最常见的 ASIL 分解

146
00:08:15,729 ---> 00:08:20,419
是把单个元素分解到安全相关和安全不相关的模块中

147
00:08:20,419 ---> 00:08:23,464
安全无关模块会标为 QM

148
00:08:23,464 ---> 00:08:29,169
这样做好处是 ISO 26262 只会应用到安全相关所在部分

149
00:08:29,169 ---> 00:08:31,143
我们来看个例子

150
00:08:31,143 ---> 00:08:33,548
比如 我们想要分解

151
00:08:33,548 ---> 00:08:36,898
助力转向 ECU 中的车道偏离报警软件块

152
00:08:36,899 ---> 00:08:40,354
我们会把最新的系统软件分为两个部分

153
00:08:40,354 ---> 00:08:44,209
一个软件模块包含完成正常功能的代码

154
00:08:44,208 ---> 00:08:46,298
然后 我们新建一个分离的软件模块

155
00:08:46,298 ---> 00:08:48,889
负责我们的功能安全要求

156
00:08:48,889 ---> 00:08:52,018
现在我们再看看我们的系统架构图

157
00:08:52,018 ---> 00:08:54,669
电子助力转向软件块被标为 ASIL C

158
00:08:54,669 ---> 00:08:57,625
使用 ASIL 分解方法后

159
00:08:57,625 ---> 00:09:03,108
负责正常功能的软件块被标为 QM 级别

160
00:09:03,108 ---> 00:09:07,958
负责故障处理的软件块被标为 ASIL C 级别

161
00:09:07,958 ---> 00:09:13,598
现在我们无需将 ISO 26262 应用到我们的正常处理软件块上

162
00:09:13,598 ---> 00:09:17,198
通过细化我们的架构 以及决定 ASIL 级别

163
00:09:17,198 ---> 00:09:21,333
我们可以得出每个元素和子系统中的风险大小

164
00:09:21,334 ---> 00:09:26,279
然后应用分解法 我们可以降低架构中某些元素的风险级别

165
00:09:21,334 ---> 00:09:26,279
然后应用分解法 我们可以降低架构中某些元素的风险级别

166
00:09:26,779 ---> 00:09:30,649
功能安全概念的主要工作包括

167
00:09:30,649 ---> 00:09:35,103
抽取功能安全要求 并把这些要求体现在系统架构中

168
00:09:35,103 ---> 00:09:36,588
虽然现在本课程即将结束

169
00:09:36,589 ---> 00:09:41,714
但是我们仍然需要讨论与功能安全要求相关的另外三个属性

170
00:09:41,714 ---> 00:09:43,669
一是容错时间间隔

171
00:09:43,669 ---> 00:09:45,829
二是报警和降级概念

172
00:09:45,829 ---> 00:09:48,798
三是正确性验收标准的验证

173
00:09:48,798 ---> 00:09:52,263
我们从容错时间间隔开始讲起

174
00:09:52,263 ---> 00:09:57,463
我们需要定义每隔多长时间系统会去检测故障并对故障做出反应

175
00:09:57,463 ---> 00:10:00,458
这个时间段我们称之为容错时间间隔

176
00:10:00,458 ---> 00:10:04,063
拿我们的 ADS 车道偏离报警作为例子

177
00:10:04,063 ---> 00:10:08,073
我们担心的一个方面是 报警的震动幅度会不会太高

178
00:10:08,074 ---> 00:10:11,599
如果幅度过高

179
00:10:11,599 ---> 00:10:14,324
那么就发生了一个故障或者错误

180
00:10:14,324 ---> 00:10:17,013
系统的故障检测需要时间

181
00:10:17,013 ---> 00:10:20,618
相关信号也需要时间在硬件和软件中传递

182
00:10:20,619 ---> 00:10:23,154
这个间隔是一个诊断性测试间隔

183
00:10:23,154 ---> 00:10:25,744
一旦系统侦测到高振幅

184
00:10:25,744 ---> 00:10:30,079
那么 它会关闭车道偏离报警功能 这同样也需要时间

185
00:10:30,078 ---> 00:10:32,119
也就是故障反应时间

186
00:10:32,119 ---> 00:10:35,328
一旦模块功能关闭 车道辅助系统就进入一种安全状态

187
00:10:35,328 ---> 00:10:38,658
在此状态下 该模块的风险等级是可接受的

188
00:10:38,658 ---> 00:10:43,753
我们期望的是 车道辅助系统能够在事故发生前进入安全状态

189
00:10:43,753 ---> 00:10:46,458
这样在系统到达安全状态和可能的事故发生时间点之间

190
00:10:46,459 ---> 00:10:49,609
有一段缓冲时间

191
00:10:49,608 ---> 00:10:52,369
因此 容错时间间隔等于

192
00:10:52,369 ---> 00:10:55,093
诊断检测间隔加上故障反应时间

193
00:10:55,093 ---> 00:10:59,434
再加上事故发生前的安全状态时间

194
00:10:59,434 ---> 00:11:03,444
每一个安全要求都有一个容错时间间隔

195
00:11:03,444 ---> 00:11:06,214
我们可以假设车道偏离报警系统

196
00:11:06,214 ---> 00:11:09,839
的容错时间间隔为50毫秒

197
00:11:09,839 ---> 00:11:14,809
大家也可以把这个时间间隔用于我们已经讨论过的两种功能安全要求上

198
00:11:14,809 ---> 00:11:18,199
这个值只是一个示例值

199
00:11:18,199 ---> 00:11:22,108
在实际的应用中 容错时间间隔可能设定为别的值

200
00:11:22,108 ---> 00:11:24,438
通过容错时间间隔 我们可以知道

201
00:11:24,438 ---> 00:11:27,408
车辆需要多长时间来对故障做出反应

202
00:11:24,438 ---> 00:11:27,408
车辆需要多长时间来对故障做出反应

203
00:11:27,908 ---> 00:11:30,187
对于每一个功能安全要求

204
00:11:30,187 ---> 00:11:33,863
我们需要讨论一下 当故障发生时 如何向司机发出警告

205
00:11:33,863 ---> 00:11:36,694
对于车道辅助模块的故障

206
00:11:36,695 ---> 00:11:39,138
我们会在司机的仪表盘上显示一个警告

207
00:11:39,138 ---> 00:11:41,438
如果方向盘 ECU 收到一个震动扭矩请求

208
00:11:41,437 ---> 00:11:44,837
请求值大于最大限值

209
00:11:44,837 ---> 00:11:46,708
警告灯将会亮起

210
00:11:46,708 ---> 00:11:51,182
这是一个更新了的系统架构图 已经把警告灯包括在内

211
00:11:51,182 ---> 00:11:52,987
注意 我们添加了一个

212
00:11:52,987 ---> 00:11:56,827
从电子助力转向 ECU 到驾驶显示子系统的连接

213
00:11:56,828 ---> 00:12:01,283
我们还需要描述出故障发生后车辆系统应如何反应

214
00:12:01,283 ---> 00:12:03,011
故障发生时

215
00:12:03,011 ---> 00:12:07,612
系统应该切换到一种低风险级别的状态

216
00:12:07,612 ---> 00:12:10,587
我们称之为安全状态

217
00:12:10,587 ---> 00:12:14,377
我们已经讲过 当违反某个安全要求时

218
00:12:14,377 ---> 00:12:18,728
车道偏离报警功能和车道保持系统功能均会关闭

219
00:12:18,728 ---> 00:12:20,858
我们可以认为 关闭某个子系统

220
00:12:20,858 ---> 00:12:23,993
就是将其调至安全状态 让其处于可接受的风险级别中

221
00:12:23,993 ---> 00:12:27,278
报警和降级概念涉及到

222
00:12:27,277 ---> 00:12:30,952
当子系统功能受限或者完全关闭时

223
00:12:30,953 ---> 00:12:32,828
如何向司机发出警告

224
00:12:32,828 ---> 00:12:36,847
如何把车辆转入安全状态 以及如何从安全状态恢复

225
00:12:36,847 ---> 00:12:41,593
车辆的使用手册也应该包含上述的报警和降级等相关内容

226
00:12:41,593 ---> 00:12:43,841
对于车道保持辅助功能

227
00:12:43,841 ---> 00:12:45,848
手册上或许会包括一个警告

228
00:12:45,847 ---> 00:12:48,563
警告内容是 该功能并不意味着完全自动的驾驶

229
00:12:48,563 ---> 00:12:52,627
司机仍然负有安全驾驶的责任

230
00:12:48,563 ---> 00:12:52,627
司机仍然负有安全驾驶的责任

231
00:12:53,127 ---> 00:12:57,131
所以 我们使用了一种不寻常的方式来构建需求

232
00:12:57,131 ---> 00:12:58,947
我们让汽车自己来为我们来构建需求

233
00:12:58,947 ---> 00:13:02,357
我知道 虽然有大量文献资料

234
00:13:02,357 ---> 00:13:06,716
讲到冗余系统和安全保证问题

235
00:13:06,716 ---> 00:13:08,066
但是现在

236
00:13:08,066 ---> 00:13:12,267
我感觉到 另外创建一个系统可能会引发一些问题

237
00:13:12,267 ---> 00:13:16,977
另外 想要为十字路口或者别的地形构建一个更好的软件解决方案也会导致问题产生

238
00:13:16,977 ---> 00:13:20,417
当我去查看车辆上最主要的故障点时

239
00:13:20,416 ---> 00:13:22,506
我发现 故障点不在车辆的计算机硬件结构中

240
00:13:22,506 ---> 00:13:23,957
因为我们还没遇到真正的硬件故障

241
00:13:23,957 ---> 00:13:25,377
然而 我们遇到了许多 许多

242
00:13:25,377 ---> 00:13:27,282
许多许多的软件问题

243
00:13:27,282 ---> 00:13:29,861
所以 最后我们建立了一个测试团队

244
00:13:29,861 ---> 00:13:34,062
很快 测试团队便增长到10到15人的规模

245
00:13:34,062 ---> 00:13:36,732
每天 我们把他们派出去 说 “出发 开测”

246
00:13:36,731 ---> 00:13:39,916
他们按动车上的一个按钮 离开了 然后 当有情况发生时

247
00:13:39,916 ---> 00:13:40,977
他们就会按一个按钮

248
00:13:40,977 ---> 00:13:43,416
开始录音 并描述他们遇到的情况

249
00:13:43,416 ---> 00:13:46,572
测试过程中的数据会自动反馈给工程师

250
00:13:46,572 ---> 00:13:48,752
每天晚上 工程师会查看数据 然后说

251
00:13:48,752 ---> 00:13:51,047
这里有个地图错误 这里有个定位问题

252
00:13:51,047 ---> 00:13:52,662
或者说 这里有个软件问题

253
00:13:52,661 ---> 00:13:55,046
或者说 天呐 这里有个从悬崖上飞下来的婴儿车

254
00:13:55,047 ---> 00:13:58,777
下落过程中还碰到了一个烂西红柿 这就是问题所在

255
00:13:58,777 ---> 00:14:01,884
然后 每周

256
00:14:01,884 ---> 00:14:04,147
我们会把这些问题汇总起来

257
00:14:04,146 ---> 00:14:08,226
典型地 其中某一种错误会占到80%

258
00:14:08,226 ---> 00:14:13,136
另一种会占到15% 然后各种错误占比依次下降

259
00:14:13,137 ---> 00:14:16,002
最后 我们会优先解决最严重的问题

260
00:14:16,002 ---> 00:14:18,807
每次我们解决了严重问题 汽车的可靠性就可以提升一倍

261
00:14:18,807 ---> 00:14:20,282
然后是 3倍 4倍

262
00:14:20,282 ---> 00:14:22,032
最后 汽车的可靠性提升了10倍

263
00:14:22,032 ---> 00:14:25,637
我的意思是 每年大概会提升10倍的样子

264
00:14:22,032 ---> 00:14:25,637
我的意思是 每年大概会提升10倍的样子

265
00:14:26,137 ---> 00:14:29,212
我们已经在功能层面定义了安全需求

266
00:14:29,212 ---> 00:14:32,402
并把这些需求放在我们的架构中

267
00:14:32,401 ---> 00:14:36,006
现在我们了解了每一项中包含的风险级别

268
00:14:36,006 ---> 00:14:40,291
我们为每一项添加了额外的功能 以确保该项以一种安全的方式来完成工作

269
00:14:40,291 ---> 00:14:44,351
下一步 我们会从技术角度来分析安全需求

270
00:14:44,351 ---> 00:14:45,832
例如 我们讲过

271
00:14:45,832 ---> 00:14:50,887
需要限定转向盘的振幅和频率

272
00:14:50,887 ---> 00:14:52,973
但是 我们具体使用什么软硬件

273
00:14:52,973 ---> 00:14:55,492
来完成限制震动的工作？

274
00:14:55,492 ---> 00:14:59,932
要确保功能安全 我们需要哪些软硬件？

275
00:14:59,932 ---> 00:15:01,338
在下一课中

276
00:15:01,338 ---> 00:15:05,377
我们会进一步讲解功能安全要求和技术安全要求

