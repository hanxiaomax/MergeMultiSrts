1
00:00:00,000 --> 00:00:04,004
所以 我们使用了一种不寻常的方式来构建需求

2
00:00:04,004 --> 00:00:05,820
我们让汽车自己来为我们来构建需求

3
00:00:05,820 --> 00:00:09,230
我知道 虽然有大量文献资料

4
00:00:09,230 --> 00:00:13,589
讲到冗余系统和安全保证问题

5
00:00:13,589 --> 00:00:14,939
但是现在

6
00:00:14,939 --> 00:00:19,140
我感觉到 另外创建一个系统可能会引发一些问题

7
00:00:19,140 --> 00:00:23,850
另外 想要为十字路口或者别的地形构建一个更好的软件解决方案也会导致问题产生

8
00:00:23,850 --> 00:00:27,290
当我去查看车辆上最主要的故障点时

9
00:00:27,289 --> 00:00:29,379
我发现 故障点不在车辆的计算机硬件结构中

10
00:00:29,379 --> 00:00:30,830
因为我们还没遇到真正的硬件故障

11
00:00:30,830 --> 00:00:32,250
然而 我们遇到了许多 许多

12
00:00:32,250 --> 00:00:34,155
许多许多的软件问题

13
00:00:34,155 --> 00:00:36,734
所以 最后我们建立了一个测试团队

14
00:00:36,734 --> 00:00:40,935
很快 测试团队便增长到10到15人的规模

15
00:00:40,935 --> 00:00:43,605
每天 我们把他们派出去 说 “出发 开测”

16
00:00:43,604 --> 00:00:46,789
他们按动车上的一个按钮 离开了 然后 当有情况发生时

17
00:00:46,789 --> 00:00:47,850
他们就会按一个按钮

18
00:00:47,850 --> 00:00:50,289
开始录音 并描述他们遇到的情况

19
00:00:50,289 --> 00:00:53,445
测试过程中的数据会自动反馈给工程师

20
00:00:53,445 --> 00:00:55,625
每天晚上 工程师会查看数据 然后说

21
00:00:55,625 --> 00:00:57,920
这里有个地图错误 这里有个定位问题

22
00:00:57,920 --> 00:00:59,535
或者说 这里有个软件问题

23
00:00:59,534 --> 00:01:01,919
或者说 天呐 这里有个从悬崖上飞下来的婴儿车

24
00:01:01,920 --> 00:01:05,650
下落过程中还碰到了一个烂西红柿 这就是问题所在

25
00:01:05,650 --> 00:01:08,757
然后 每周

26
00:01:08,757 --> 00:01:11,020
我们会把这些问题汇总起来

27
00:01:11,019 --> 00:01:15,099
典型地 其中某一种错误会占到80%

28
00:01:15,099 --> 00:01:20,009
另一种会占到15% 然后各种错误占比依次下降

29
00:01:20,010 --> 00:01:22,875
最后 我们会优先解决最严重的问题

30
00:01:22,875 --> 00:01:25,680
每次我们解决了严重问题 汽车的可靠性就可以提升一倍

31
00:01:25,680 --> 00:01:27,155
然后是 3倍 4倍

32
00:01:27,155 --> 00:01:28,905
最后 汽车的可靠性提升了10倍

33
00:01:28,905 --> 00:01:32,510
我的意思是 每年大概会提升10倍的样子

