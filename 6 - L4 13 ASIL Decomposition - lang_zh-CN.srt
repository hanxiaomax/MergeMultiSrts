1
00:00:00,000 --> 00:00:03,285
我们讲过 对于车道偏离报警功能

2
00:00:03,285 --> 00:00:07,095
电子助力转向子系统的风险级别为 ASIL C

3
00:00:07,094 --> 00:00:10,330
尽管 ASIL C 并非最高的风险级别

4
00:00:10,330 --> 00:00:12,150
但是 相比更低的级别 

5
00:00:12,150 --> 00:00:17,120
此级别仍然需要很多额外测试和校验工作

6
00:00:17,120 --> 00:00:21,675
有什么方法可以降低架构中某些元素的风险级别吗？

7
00:00:21,675 --> 00:00:23,234
事实证明还是有办法的

8
00:00:23,234 --> 00:00:25,684
该方法称为 ASIL 分解

9
00:00:25,684 --> 00:00:28,859
假设我们系统中的某个功能模块被标示为 ASIL D

10
00:00:28,859 --> 00:00:32,460
如果我们为此模块实现两个完全互相独立的冗余系统

11
00:00:32,460 --> 00:00:38,689
根据 ISO 26262 我们可以把每个冗余系统标示为 ASIL B

12
00:00:38,689 --> 00:00:41,000
结果源于概率

13
00:00:41,000 --> 00:00:45,480
如果单个系统的故障发生概率为0.8

14
00:00:45,479 --> 00:00:48,359
那么两个互相独立的冗余系统均发生故障的概率

15
00:00:48,359 --> 00:00:52,634
会降低到0.8乘0.8 也就是0.64

16
00:00:52,634 --> 00:00:55,304
冗余系统可以降低风险

17
00:00:55,304 --> 00:00:59,179
创建独立冗余系统的收益何在？

18
00:00:59,179 --> 00:01:04,245
答案是 相比 ASIL D ASIL B需要的分析和测试工作量更少

19
00:01:04,245 --> 00:01:08,216
根据参考标准 如果原始系统风险级别为 ASIL D

20
00:01:08,216 --> 00:01:12,390
那么冗余系统的风险级别可以标为 ASIL B(D)

21
00:01:12,390 --> 00:01:15,480
最常见的 ASIL 分解

22
00:01:15,480 --> 00:01:20,170
是把单个元素分解到安全相关和安全不相关的模块中

23
00:01:20,170 --> 00:01:23,215
安全无关模块会标为 QM

24
00:01:23,215 --> 00:01:28,920
这样做好处是 ISO 26262 只会应用到安全相关所在部分

25
00:01:28,920 --> 00:01:30,894
我们来看个例子

26
00:01:30,894 --> 00:01:33,299
比如 我们想要分解

27
00:01:33,299 --> 00:01:36,649
助力转向 ECU 中的车道偏离报警软件块

28
00:01:36,650 --> 00:01:40,105
我们会把最新的系统软件分为两个部分

29
00:01:40,105 --> 00:01:43,960
一个软件模块包含完成正常功能的代码

30
00:01:43,959 --> 00:01:46,049
然后 我们新建一个分离的软件模块

31
00:01:46,049 --> 00:01:48,640
负责我们的功能安全要求

32
00:01:48,640 --> 00:01:51,769
现在我们再看看我们的系统架构图

33
00:01:51,769 --> 00:01:54,420
电子助力转向软件块被标为 ASIL C

34
00:01:54,420 --> 00:01:57,376
使用 ASIL 分解方法后

35
00:01:57,376 --> 00:02:02,859
负责正常功能的软件块被标为 QM 级别

36
00:02:02,859 --> 00:02:07,709
负责故障处理的软件块被标为 ASIL C 级别

37
00:02:07,709 --> 00:02:13,349
现在我们无需将 ISO 26262 应用到我们的正常处理软件块上

38
00:02:13,349 --> 00:02:16,949
通过细化我们的架构 以及决定 ASIL 级别

39
00:02:16,949 --> 00:02:21,084
我们可以得出每个元素和子系统中的风险大小

40
00:02:21,085 --> 00:02:26,030
然后应用分解法 我们可以降低架构中某些元素的风险级别

